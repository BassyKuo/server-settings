#!/bin/sh

# Custom script with /etc/cron.hourly/hosts-protect & /home/hosts-monitor.report
# Try 'hosts-monitor --help' for more information

# ==== /usr/local/bin/hosts-monitor @ 2018/1/22 by Bass <aaammmyyy27@gmail.com> ====

PROG=$(echo $0 | awk -F'/' '{print $NF}')
SUFFIX_FORMAT="%-12s %-10s %-14s %-18s %-15s %-16s %-5s\n"
LINE_LENGTH=98
FOOTER="[ $(date '+%F %R') FOUND ]"
TIME=$(date '+%F %T')
USER_NAME=$(who -m | awk '{print $1}')

# hosts_deny=/etc/hosts.deny
# report=/home/hosts-monitor.report
#shortrepo=/etc/ssh/sshd_banner
#hosts_protect=/etc/cron.hourly/hosts-protect
hosts_deny="$PWD/hosts.deny"
report="$PWD/hosts-monitor.report"
shortrepo="$PWD/sshd_banner"
hosts_protect="$PWD/hosts-protect"

show_list_help() {
	printf "%s\n" "Usage: $PROG list [{-t|-s|-e|-u|-i|-S} <PATTERN>] [-a]"
	printf "%s\n" "       $PROG list <PATTERN>"
	echo ""
	format="%s\t%s\t%s\n"
	( \
	printf $format "-t,--time,time [TIME]" "list specific date record" "[TIME]={today,yesterday,...}"
	printf $format "-s,--service,service [SERVICE]" "list specific service record" "[SERVICE]={sshd,hosts-monitor}"
	printf $format "-e,--event,event [EVENT]" "list specific event record" "[EVENT]={Invalid-User,Failed-Password,Manual}"
	printf $format "-u,--user,--id,user,id [USERID]" "list specific login userid record" "[USERID]={admin,test,root,...}"
	printf $format "-i,--ip,ip [IP]" "list specific login ip record" "[IP]=xxx.xxx.xxx.xxx"
	printf $format "-S,--status,status [STATUS]" "list specific ban/unban record" "[STATUS]={ban,unban}"
	printf $format "-a,--all,all" "list all record"
	printf $format "PATTERN" "search lines matching the pattern in regular expression" "ex: 'Ban', '^2018.*root', '\\(root\\|admin\\|user\\)'"
	) | column -t -s'	' | awk '{print "   "$0}'
	echo ""
	exit 0
}
show_ban_help() {
	printf "%s\n" "Usage: $PROG ban {-a|-x} <IP>"
	printf "%s\n" "       $PROG unban <IP>"
	echo ""
	format="%s\t%s\t%s\n"
	( \
	printf $format "-a,--add,add [IP]" "add specific ip to hosts.deny" "(same as \`$PROG ban <IP>\`)"
	printf $format "-x,-rm,--remove,remove [IP]" "remove specific ip from hosts.deny" "(same as \`$PROG unban <IP>\`)"
	) | column -t -s'	' | awk '{print "   "$0}'
	echo ""
	exit 0
}
show_service_help() {
	printf "%s\n" "Usage: $PROG service {-a|-x|-r}"
	printf "%s\n" "       $PROG service {start|stop|restart}"
	echo ""
	format="%s\t%s\t%s\n"
	( \
	printf $format "-a,--start,start" "enable to run hosts-protect daemon"
	printf $format "-x,--stop,stop" "disable to run hosts-protect daemon"
	printf $format "-r,--restart,restart" "enable and execute the hosts-protect"
	) | column -t -s'	' | awk '{print "   "$0}'
	echo ""
	exit 0
}
show_help() {
	printf "%s\n\n" "Usage: $PROG [COMMAND]"
	format="%s\t%s\t%s\n"
	( \
	printf $format "list" "show the record report ($report)"
	printf $format "ban" "set the ban/unban ip" "[root]"
	printf $format "service" "enable/disable/execute the hosts-protect daemon" "[root]"
	) | column -t -s'	' | awk '{print "   "$0}'
	printf "\n%s\n" "Try '$PROG [COMMAND] --help' for more information."
}

errmsg() {
	echo "FATAL: $1"
}
check_ip() {
	IP=$1
	echo $IP | grep '^[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}$' > /dev/null && \
		return 0 || \
		(errmsg "error ip format!"; return 1)
}
update_repo() {
	sed -i '$d' $shortrepo
	echo $@ | \
		awk -v "format=$SUFFIX_FORMAT" \
			'NF>0  { printf format, $1, $2, $3, $4, "", $6, $7 }' | tee -a $shortrepo >> $report
	echo "$FOOTER" | wc -L | \
		awk -v "len=$LINE_LENGTH" -v "footer=$FOOTER" \
			'{ for(i=1;i<=(len-$1)/2;i++) printf "-"; }
			{ printf "%s", footer }
			{ for(i=1;i<=(len-$1)/2;i++) printf "-"; printf "\n" }' | tee -a $shortrepo > /dev/null
	cat $shortrepo
}
ban_ip() {
	IP=$1
	echo "ALL: $IP" >> $hosts_deny
	update_repo "$TIME $PROG Manual:$USER_NAME (null) $IP Ban"
	echo " +++ Ban $IP"
}
unban_ip() {
	IP=$1
	sed -i "/$IP/d" $hosts_deny
	update_repo "$TIME $PROG Manual:$USER_NAME (null) $IP Unban"
	echo " --- Unban $IP"
}

# ---[ Content
case $1 in
	"-h"|"--help"|"help")
		show_help
		;;
	"list")
		shift
		if [ $# -le 1 ] && [ $(echo $1 | grep -e "-a" -e "all" -e "-h" -e "help" > /dev/null; echo $?) -ne 0 ]; then
			STR=${1:-"$(date -d now '+%F')"}
			head -n +3 $report
			cat ${report}* | grep --color=yes -i "$STR" || echo "(empty)"
			exit 0
		fi
		STR=
		IDX=
		while test $# -gt 0 ; do
			KEY=$1
			case $KEY in
				"-h"|"--help"|"help")
					show_list_help
					;;
				"-t"|"--time"|"time")
					STR="$STR $(date -d ${2:-'today'} '+%F')"
					IDX="$IDX 1"
					;;
				"-s"|"--service"|"service")
					STR="$STR $2"
					IDX="$IDX 3"
					;;
				"-e"|"--event"|"event")
					STR="$STR $2"
					IDX="$IDX 4"
					;;
				"-u"|"--user"|"--id"|"user"|"id")
					STR="$STR $2"
					IDX="$IDX 5"
					;;
				"-i"|"--ip"|"ip")
					check_ip $2 && s=$2 || exit 1
					STR="$STR $s"
					IDX="$IDX 6"
					;;
				"-S"|"--status"|"status")
					echo $2 | grep "^[Bb][Aa][Nn]" > /dev/null && s="^Ban" || s=$2
					STR="$STR $s"
					IDX="$IDX 7"
					;;
				"-a"|"--all"|"all")
					STR="$STR $(date '+%Y')"
					IDX="$IDX 1"
					break
					;;
				*)
					echo "$PROG list: invalid option '$@'"
					echo "Try '$PROG list --help' for more information."
					exit 0
					;;
			esac
			shift; shift
		done
		head -n +3 $report
		awk -v "idxes=$IDX" -v "strs=$STR" \
			'BEGIN{	split(idxes, idx, / +/);
					n=split(strs, str, / +/); }
			{ flag=1; for (i=2;i<=n;i++) {
				if (tolower($idx[i]) !~ tolower(str[i])) { flag=0; break; } }
			if(flag) print $0 }' ${report}* || echo "(empty)"
		;;
	"ban")
		shift;
		KEY=$1
		case $KEY in
			"-h"|"--help"|"help")
				show_ban_help
				;;
			"-a"|"--add"|"add")
				shift
				while test $# -gt 0; do
					check_ip $2 && IP=$2 || exit 1
					ban_ip $IP
					shift
				done
				;;
			"-x"|"-rm"|"--remove"|"remove")
				shift
				while test $# -gt 0; do
					check_ip $1 && IP=$1 || exit 1
					unban_ip $IP
					shift
				done
				;;
			*)
				while test $# -gt 0; do
					check_ip $1 && IP=$1 || exit 1
					ban_ip $IP
					shift
				done
				;;
		esac
		;;
	"unban")
		shift
		while test $# -gt 0; do
			KEY=$1
			case $KEY in
				"-h"|"--help"|"help")
					show_ban_help
					;;
				*)
					check_ip $1 && IP=$1 || exit 1
					unban_ip $IP
					;;
			esac
			shift
		done
		;;
	"service")
		shift
		KEY=$1
		case $KEY in
			"-a"|"--start"|"start")
				chmod +x $hosts_protect
				;;
			"-x"|"--stop"|"stop")
				chmod -x $hosts_protect
				;;
			"-r"|"--restart"|"restart")
				chmod +x $hosts_protect
				$hosts_protect
				;;
			*)
				show_service_help
				;;
		esac
		;;
	*)
		echo "$PROG: invalid option '$@'"
		echo "Try '$PROG --help' for more information."
esac
